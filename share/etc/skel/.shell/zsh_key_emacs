# Key bindings

bindkey -e

bindkey '\ev' vi-cmd-mode		## M-v
bindkey "\ei" menu-complete		## M-i
bindkey '\eI' reverse-menu-complete	## M-I
bindkey "\ee" expand-cmd-path		## M-e

# search backwards for a line which has the entire starting point
# up to the cursor position the same as the current line.
bindkey '^p' history-beginning-search-backward
bindkey '^n' history-beginning-search-forward

case $TERM in
	linux|rxvt-unicode|mlterm|screen)
  bindkey "[2~" yank                 ## Insert
  bindkey "[3~" delete-char          ## Delete
  bindkey "[5~" up-line-or-history   ## PageUp
  bindkey "[6~" down-line-or-history ## PageDown
  bindkey "[1~" beginning-of-line    ## Home
  bindkey "[4~" end-of-line          ## End
;;
	xterm|rxvt)
  bindkey "[2~" yank                 ## Insert
  bindkey "[3~" delete-char          ## Delete
  bindkey "[5~" up-line-or-history   ## PageUp
  bindkey "[6~" down-line-or-history ## PageDown
  bindkey "[7~" beginning-of-line    ## Home
  bindkey "[8~" end-of-line          ## End
;;
esac

# do 'cd' on TAB at start of cmdline
# http://www.zsh.org/mla/users/2004/msg00744.html
cd-complete-path() {
	[[ -z "$BUFFER" && -z "$PREBUFFER" ]] && LBUFFER="cd "
	zle expand-or-complete "$@"
}
zle -N cd-complete-path
bindkey '\t' cd-complete-path

# do 'ls' on empty cmdline
# disabled for vi-history-search-backward
# ls-on-empty-line() {
# 	[[ -z "$BUFFER" && -z "$PREBUFFER" ]] && LBUFFER="ls"
# 	zle .accept-line "$@"
# }
# zle -N ls-on-empty-line
# bindkey -M main '\r' ls-on-empty-line

## This function allows you type a file pattern,
## and see the results of the expansion at each step.
## When you hit return, they will be inserted into the command line.
autoload -U insert-files
zle -N insert-files
bindkey "^Xf" insert-files ## C-x-f

## This allows incremental completion of a word.
## After starting this command, a list of completion
## choices can be shown after every character you
## type, which you can delete with ^h or DEL.
## RET will accept the completion so far.
## You can hit TAB to do normal completion, ^g to
## abort back to the state when you started, and ^d to list the matches.
# autoload -U incremental-complete-word
# zle -N incremental-complete-word
# bindkey "^Xi" incremental-complete-word ## C-x-i

## This set of functions implements a sort of magic history searching.
## After predict-on, typing characters causes the editor to look backward
## in the history for the first line beginning with what you have typed so
## far.  After predict-off, editing returns to normal for the line found.
## In fact, you often don't even need to use predict-off, because if the
## line doesn't match something in the history, adding a key performs
## standard completion - though editing in the middle is liable to delete
## the rest of the line.
# autoload -U predict-on
# zle -N predict-on
# zle -N predict-off
# bindkey "^X^Z" predict-on ## C-x C-z
# bindkey "^Z" predict-off ## C-z


## Better word navigation

# Remember, WORDCHARS is defined as a 'list of non-alphanumeric
# characters considered part of a word by the line editor'.

# Elsewhere we set it to the empty string.

_my_extended_wordchars="*?_\/-.[]~=&;!#$%^(){}<>@"

# is the current position \-quoted ?
is_backslash_quoted () {
    test "${BUFFER[$CURSOR-1,CURSOR-1]}" = "\\"
}

unquote-forward-word () {
    while is_backslash_quoted
      do zle .forward-word
    done
}

unquote-backward-word () {
    while is_backslash_quoted
      do zle .backward-word
    done
}

backward-to-space () {
    local WORDCHARS="${_my_extended_wordchars}"
    zle .backward-word
    unquote-backward-word
}

forward-to-space () {
     local WORDCHARS="${_my_extended_wordchars}"
     zle .forward-word
     unquote-forward-word
}

kill-big-word () {
    local WORDCHARS="${_my_extended_wordchars_slash}"
    zle .kill-word
}

backward-kill-big-word () {
    local WORDCHARS="${_my_extended_wordchars}"
    zle .backward-kill-word
}

# Create new user-defined widgets pointing to eponymous functions.
zle -N backward-to-space
zle -N forward-to-space
zle -N kill-big-word
zle -N backward-kill-big-word

bindkey '\eF'  forward-to-space
bindkey '\eB'  backward-to-space
bindkey '\eD'  kill-big-word
#  bindkey '\e' backward-kill-big-word


# bindkey 'b'   emacs-backward-word
# bindkey 'f'   emacs-forward-word
# bindkey 'h'   backward-delete-word
# bindkey 'i'   expand-or-complete
# bindkey '^_'    undo
# bindkey '^q'    quoted-insert
# bindkey '^u'    universal-argument
# bindkey '^w'    kill-region
# bindkey '^x^e'  list-expand
# bindkey '/'   redo
# bindkey '[f'  end-of-line
# bindkey '[h'  beginning-of-line
# bindkey 'c'   copy-prev-word
# bindkey 'q'   push-line-or-edit
# bindkey 't'   exchange-point-and-mark
# bindkey '^d'    delete-char
# bindkey '^xr'   redo
#
# bindkey ';^f'   emacs-forward-word
# bindkey ';^b'   emacs-backward-word
# bindkey ';^h'   backward-delete-word
# bindkey ';^d'   kill-word
# bindkey ';^w'   copy-region-as-kill
#
# bindkey 'OH'  beginning-of-line
# bindkey 'OF'  end-of-line
# bindkey '[H'  beginning-of-line
# bindkey '[F'  end-of-line
# bindkey '[5~' beginning-of-line
# bindkey '[6~' end-of-line
#
# bindkey '[11~' insert-hoge #F1
# bindkey '[12~' insert-hoge #F2
# bindkey '[13~' insert-hoge #F3
# bindkey '[14~' insert-hoge #F4
# bindkey '[15~' insert-hoge #F5
# bindkey '[17~' insert-hoge #F6
# bindkey '[18~' insert-hoge #F7
# bindkey '[19~' insert-hoge #F8
# bindkey '[20~' insert-hoge #F9
# bindkey '[21~' insert-hoge #F10
# bindkey '[23~' insert-hoge #F11
# bindkey '[24~' insert-hoge #F12
#
# bindkey '[[A' insert-hoge #F1
# bindkey '[[B' insert-hoge #F2
# bindkey '[[C' insert-hoge #F3
# bindkey '[[D' insert-hoge #F4
# bindkey '[[E' insert-hoge #F5
#
# bindkey 'OP' insert-hoge #F1
# bindkey 'OQ' insert-hoge #F2
# bindkey 'OR' insert-hoge #F3
# bindkey 'OS' insert-hoge #F4
#
# bindkey '[25~' insert-hoge #Windows key
# bindkey -M menuselect '^n' down-line-or-history
# bindkey -M menuselect '^p' up-line-or-history
# bindkey -M menuselect '^o' accept-and-infer-next-history
#
# function insert-hoge () {
# #    LBUFFER+="${KEYS}"
#     LBUFFER+="hoge"
# #    RBUFFER="hoge${RBUFFER}"
# }
# zle -N insert-hoge
#
# autoload -U     up-line-or-beginning-search
# zle      -N     up-line-or-beginning-search
# bindkey '^p'    up-line-or-beginning-search
#
# autoload -U     down-line-or-beginning-search
# zle      -N     down-line-or-beginning-search
# bindkey '^n'    down-line-or-beginning-search
#
# autoload -U url-quote-magic
# zle -N self-insert url-quote-magic
