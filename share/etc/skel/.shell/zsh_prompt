# PS{1,2,3}, RPOMPT, ..
# The "prompt" of the shell.
#  See zshmisc(1) (/PROMPT EXPANSION) for details.
#
# %n         $USERNAME.
# @          literal '@'
# %m         machine name.
# %M         The full machine hostname.
# %%         %
# %/         Present working directory ($PWD) (i. e.: /home/$USERNAME)
# %~         Present working directory ($PWD) (i. e.: ~)
# %h         Current history event number.
# %!         Current history event number.
# %L         The current value of $SHLVL.
# %S (%s)    Start (stop) standout mode.
# %U (%u)    Start (stop) underline mode.
# %B (%b)    Start (stop) boldface mode.
# %t / %@    Current time of day, in 12-hour, am/pm format.
# %T         Current time of day, in 24-hour format.
# %*         Current time of day in 24-hour  format,  with  seconds
# %N         The  name  of  the  script,  sourced file, or shell
#            function that zsh is currently executing,
# %i         The line number currently  being  executed  in  the script
# %w         The date in day-dd format.
# %W         The date in mm/dd/yy format.
# %D         The date in yy-mm-dd format.
# %D{string} string  is  formatted  using the strftime function (strftime(3))
# %l         The line (tty) the user is logged in on
# %?         The  return  code of the last command executed just before the prompt
# %_         The status of the parser
# %E         Clears to end of line
# %#         A  `#'  if  the shell is running with privileges, a `%' if not
# %v         The  value  of the first element of the psvar array parameter
# %{...%}    Include a string as a literal escape sequence
# :          literal ':'
# %Nc        "relative path", ie last N components of $PWD.
# >          literal '>'

# Color definitions
#RED="%{\e[1;31m%}"
#GREEN="%{\e[1;32m%}"
#YELLOW="%{\e[1;33m%}"
#BLUE="%{\e[1;34m%}"
#PINK="%{\e[1;35m%}"
#CYAN="%{\e[1;36m%}"
#WHITE="%{\e[1;37m%}"

WIDTH=12

# http://www.zshwiki.org/cgi-bin/wiki.pl?ZshHardStatus
# usage: title <screen-window-title> [screen-hardstatus]
function title {
    local hostprefix
    if [[ -n $SSH_CONNECTION || -n $SSH_CLIENT ]]; then
        hostprefix="${HOST//.*}:"
    fi
    if [ $UID -eq 0 ] ; then
	    hostprefix="${hostprefix/:/#}"
    fi
    if [[ $TERM =~ ^(screen|tmux) ]]; then
	    if [[ `echo $1$2 | wc -c` != `echo $1$2 | wc -m` ]]; then # screen cannot handle utf-8 chiness chars
		    tt=`echo $1 |  LANG= sed 's/[^[:print:]]\+/?/g'`
		    hs=`echo $2 |  LANG= sed 's/[^[:print:]]\+/?/g'`
		    #  hs=`echo $hs | sed 's/[^0-9a-zA-Z#+=_/-]\+/?/g'`
		    #  tt=`echo $tt | sed 's/[^0-9a-zA-Z#+=_/-]\+/?/g'`
	    else
		    tt=$1
		    hs=$2
	    fi
	    # Use these two for GNU Screen:
	    #  print -nR $'\033k'$tt$'\033'\\
	    echo -ne '\ek'$tt'\e'\\
	    #[ -n "$2" ] && print -nR " $2"
	    #  print -nR $'\033'\\
	    print -nR $'\033]0;'$hostprefix$hs$'\a'
	    #  echo hi $tt $hostprefix $hs
    elif [[ $TERM == "xterm" || $TERM =~ ^rxvt ]]; then
      # Use this one instead for XTerms:
      print -nR $'\033]0;'$hostprefix$2$'\a'
    fi
}

function preexec() {
    emulate -L zsh
    local -a cmd; cmd=(${(z)1})             # Re-parse the command line
    local T1

    print -n "$reset_color"

    # Construct a command that will output the desired job number.
    case $cmd[1] in
        fg) if (( $#cmd == 1 )); then
                # No arguments, must find the current job
                cmd=(builtin jobs -l %+)
            else
                # Replace the command name, ignore extra args.
                cmd=(builtin jobs -l ${(Q)cmd[2]})
            fi;;
        %*) cmd=(builtin jobs -l ${(Q)cmd[1]});; # Same as "else" above
        *)
        T1="$cmd[1]:t"
        [[ -n "${cmd[2,-1]}" ]] && T1="$T1 ${cmd[2,-1]}"
        [[ ${#T1} -gt ${WIDTH} ]] && T1="${T1[1,${WIDTH}]}?"
        title $T1 "$cmd"    # Not resuming a job,
            return;;                        # so we're all done
    esac

    local -A jt; jt=(${(kv)jobtexts})       # Copy jobtexts for subshell

    # Run the command, read its output, and look up the jobtext.
    # Could parse $rest here, but $jobtexts (via $jt) is easier.
    $cmd >>(read num rest
            cmd=(${(z)${(e):-\$jt$num}})
            T1="$cmd[1]:t"
            [[ -n "${cmd[2,-1]}" ]] && T1="$T1 ${cmd[2,-1]}"
            [[ ${#T1} -gt ${WIDTH} ]] && T1="${T1[1,${WIDTH}]}?"
            title $T1 "$cmd"  ) 2>/dev/null
}

function precmd () {

  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  PR_FILLBAR=""
  PR_PWDLEN=""

  if [[ -n "$SSH_CONNECTION" || -n "$SSH_CLIENT"  ]]; then
    local promptsize=${#${(%):---(%n@%m-)---($DATEFMT)---}}
  else
    local promptsize=${#${(%):---(%n-)---($DATEFMT)---}}
  fi
  #  local pwdsize=${#${(%):-%~}}
  #  local pwdsize=$(echo ${(%):-%~} | wc -c)
  #  pwdsize=$((pwdsize-1))

  # if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
  #   ((PR_PWDLEN=$TERMWIDTH - $promptsize))
  # else
  #   PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
  # fi

  # print dir name in term title
  #title sh/`basename "$PWD"` "$PWD"
  #title sh "$PWD"
  dirname="${PWD/$HOME/~}"
  [[ ${#dirname} -gt ${WIDTH} ]] && dirname="$(basename "$(dirname "$dirname")")/$(basename "$dirname")" && \
  [[ ${#dirname} -gt ${WIDTH} ]] && dirname="$(basename "$dirname")" && \
  [[ ${#dirname} -gt ${WIDTH} ]] && dirname="?$dirname[-${WIDTH},-1]"
  [[ ${dirname} == '~' ]] && title sh "$PWD - ZSH"
  [[ ${dirname} == '~' ]] || title "[$dirname]" "$PWD - ZSH"

  #case $TERM in
  #  xterm*|rxvt|rxvt-unicode*|mlterm|screen|Eterm)
  #  print -Pn "\e]0;%n@%m: %~\a"
  #  ;;
  #esac
}


function setprompt-long () {

  setopt prompt_subst

  autoload colors
  colors
  local COLOR
  for COLOR in BLACK RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval $COLOR='%{$termcap[md]$fg[${(L)COLOR}]%}'
    eval LIGHT_$COLOR='%{$fg[${(L)COLOR}]%}'
    (( count = $count + 1 ))
  done
  DEF="%{$termcap[me]%}"

  typeset -A altchar
  set -A altchar ${(s..)termcap[ac]}
  PR_SET_CHARSET="%{$termcap[eA]%}"
  PR_SHIFT_IN="%{$termcap[as]%}"
  PR_SHIFT_OUT="%{$termcap[ae]%}"
  PR_HBAR=${altchar[q]:--}
  PR_ULCORNER=${altchar[l]:--}
  PR_LLCORNER=${altchar[m]:--}
  PR_LRCORNER=${altchar[j]:--}
  PR_URCORNER=${altchar[k]:--}


## set location
[[ -f /etc/gentoo-release ]] && DISTRIB="gentoo"
[[ -f /etc/debian_version ]] && DISTRIB="debian"

  if [[ $DISTRIB = "gentoo" ]]; then MCOLOR=$GREEN
  elif [[ $DISTRIB = "debian" ]]; then MCOLOR=$YELLOW
  else MCOLOR=$WHITE
  fi

  DATEFMT_CN='%D{%H:%M}'
  if [[ $LANG = 'zh_CN.GBK' ]]; then
	  DATEFMT=$DATEFMT_CN
# zsh do not support utf-8 yet...
#  elif [[ $LANG = 'zh_CN.UTF-8' ]]; then
#	  DATEFMT=`echo $DATEFMT_CN|iconv -f GBK -t UTF-8`
  else
	  #DATEFMT_EN='%D{%a %b %d} %D{%I:%M:%S%P}'
	  #DATEFMT=$DATEFMT_EN
	  DATEFMT='%D{%H:%M}'
  fi

  if [[ -n $SSH_CONNECTION || -n $SSH_CLIENT  ]]; then
          sshhost="$MCOLOR@$WHITE%m"
  fi
  PROMPT='$PR_SET_CHARSET\
$BLACK$PR_SHIFT_IN$PR_ULCORNER$BLUE$PR_HBAR$PR_SHIFT_OUT(\
$MCOLOR%(!,$RED,$WHITE)%n$sshhost$BLACK|%{$reset_color%}%U%$PR_PWDLEN<...<%~%<<%u\
$BLUE)$PR_SHIFT_IN$PR_HBAR$BLACK$PR_HBAR${(e)PR_FILLBAR}$PR_HBAR$BLUE$PR_HBAR$PR_SHIFT_OUT(\
$WHITE$DATEFMT\
$BLUE)$PR_SHIFT_IN$PR_HBAR$BLACK$PR_URCORNER$PR_SHIFT_OUT\

$PR_SHIFT_IN$PR_LLCORNER$BLUE$PR_HBAR$PR_SHIFT_OUT%#$DEF '

  RPROMPT=' $BLACK$PR_SHIFT_IN$PR_HBAR$BLUE$PR_HBAR$PR_SHIFT_OUT\
($MCOLOR%(?,$GREEN\\o/,$RED\\o_ $WHITE%139(?,Seg fault,\
%130(?,Interrupt,%138(?,Bus Error,%?)))$RED _o/)\
$BLUE)$PR_SHIFT_IN$PR_HBAR$BLACK$PR_LRCORNER$PR_SHIFT_OUT$DEF'

  SPROMPT='zsh: correct $RED%R$DEF to $GREEN%r$DEF%b ? ([${MCOLOR}Y$DEF]es/\
[${MCOLOR}N$DEF]o/[${MCOLOR}E$DEF]dit/[${MCOLOR}A$DEF]bort) '

  PS2='$BLACK$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$MCOLOR%_$BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$BLACK$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$DEF '
}


function setprompt () {
        local hostprefix
        if [[ -n $SSH_CONNECTION || -n $SSH_CLIENT ]]; then
                hostprefix="%{$fg_bold[black]%}@%{$fg[blue]%}%m"
        fi
	if [ $UID -eq 0 ] ; then
		#PROMPT=$'%B%(?..[%?] )%b%{\e[1;31m%}%n%{\e[1;30m%}@%{\e[1;34m%}%m %U%~%u%{\e[1;31m%}%#%{\e[0m%} '
		PROMPT="%{$fg_bold[red]%}%n$hostprefix %{$reset_color%}%U%~%u%{$fg_bold[black]%}%#%{$reset_color%} %{$fg_bold[yellow]%}"
	else
		#PROMPT=$'%B%(?..[%?] )%b%{\e[1;33m%}%n%{\e[1;30m%}@%{\e[1;34m%}%m %U%~%u%{\e[1;30m%}%#%{\e[0m%} '
		PROMPT="%{$fg_bold[yellow]%}%n$hostprefix %{$reset_color%}%U%~%u%{$fg_bold[black]%}%#%{$reset_color%} %B"
	fi
	#RPROMPT="%(?..%{$bg_bold[red]%} [ %? ] %{$reset_color%} %b:-(%B)"
	#RPROMPT="%{$fg_no_bold[green]%}%~%{$reset_color%}"
}


LISTPROMPT=''

if false; then
	setprompt-long
else
	setprompt
fi
